<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Detalle del Carrito: {{cart._id}}</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <div class="container">
        <h1>Detalle del Carrito</h1>
        {{#with cart}}
            <h2>ID del Carrito: {{_id}}</h2>
            {{#if products.length}}
                <ul id="cartProductsList">
                    {{#each products}}
                        <li class="cart-product-item" id="cart-product-{{this.product._id}}">
                            <strong>Producto:</strong> <span>{{this.product.title}}</span><br>
                            <strong>ID del Producto:</strong> <span>{{this.product._id}}</span><br>
                            <strong>Precio Unitario:</strong> <span>${{this.product.price}}</span><br>
                            <strong>Cantidad:</strong> <span class="quantity-display">{{this.quantity}}</span><br>
                            <div class="cart-product-actions">
                                <button class="button update-quantity-button" data-product-id="{{this.product._id}}" data-cart-id="{{../_id}}" data-action="decrease">-</button>
                                <button class="button update-quantity-button" data-product-id="{{this.product._id}}" data-cart-id="{{../_id}}" data-action="increase">+</button>
                                <button class="button remove-from-cart-button" data-product-id="{{this.product._id}}" data-cart-id="{{../_id}}">Eliminar</button>
                            </div>
                        </li>
                    {{/each}}
                </ul>
                <div class="cart-actions-bottom">
                    <button class="button clear-cart-button" data-cart-id="{{_id}}">Vaciar Carrito</button>
                </div>
            {{else}}
                <p>Este carrito está vacío.</p>
            {{/if}}
            <a href="/products" class="button back-button">Volver a Productos</a>
        {{else}}
            <p>Carrito no encontrado.</p>
        {{/with}}
    </div>

    <div id="messageBox" class="message-box"></div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io(); // Conexión al servidor de WebSockets
        const messageBox = document.getElementById('messageBox');
        const cartProductsList = document.getElementById('cartProductsList');

        function showMessage(message, type = 'success') {
            messageBox.textContent = message;
            messageBox.className = 'message-box show';
            if (type === 'error') {
                messageBox.style.backgroundColor = '#dc3545';
            } else {
                messageBox.style.backgroundColor = '#4CAF50';
            }
            setTimeout(() => {
                messageBox.classList.remove('show');
            }, 3000);
        }

        // Listener para los botones de eliminar y actualizar cantidad en el carrito (delegación de eventos)
        if (cartProductsList) {
            cartProductsList.addEventListener('click', async (event) => {
                const target = event.target;
                const productId = target.dataset.productId;
                const cartId = target.dataset.cartId;

                if (target.classList.contains('remove-from-cart-button')) {
                    try {
                        const response = await fetch(`/api/carts/${cartId}/products/${productId}`, {
                            method: 'DELETE'
                        });
                        const data = await response.json();
                        if (response.ok) {
                            showMessage('Producto eliminado del carrito!');
                            location.reload(); // Recargar la página para reflejar los cambios
                        } else {
                            showMessage(`Error: ${data.message || response.statusText}`, 'error');
                        }
                    } catch (error) {
                        console.error('Error al eliminar producto del carrito:', error);
                        showMessage('Error de conexión al servidor.', 'error');
                    }
                } else if (target.classList.contains('update-quantity-button')) {
                    const action = target.dataset.action;
                    const quantityDisplay = target.closest('.cart-product-item').querySelector('.quantity-display');
                    let currentQuantity = parseInt(quantityDisplay.textContent);
                    let newQuantity = currentQuantity;

                    if (action === 'increase') {
                        newQuantity = currentQuantity + 1;
                    } else if (action === 'decrease') {
                        newQuantity = currentQuantity - 1;
                    }

                    if (newQuantity < 0) newQuantity = 0; // Evitar cantidad negativa

                    try {
                        const response = await fetch(`/api/carts/${cartId}/products/${productId}`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ quantity: newQuantity })
                        });
                        const data = await response.json();
                        if (response.ok) {
                            showMessage('Cantidad actualizada!');
                            location.reload(); // Recargar la página para reflejar los cambios
                        } else {
                            showMessage(`Error: ${data.message || response.statusText}`, 'error');
                        }
                    } catch (error) {
                        console.error('Error al actualizar cantidad:', error);
                        showMessage('Error de conexión al servidor.', 'error');
                    }
                }
            });
        }

        // Listener para el botón "Vaciar Carrito"
        const clearCartButton = document.querySelector('.clear-cart-button');
        if (clearCartButton) {
            clearCartButton.addEventListener('click', async (event) => {
                const cartId = event.target.dataset.cartId;
                try {
                    const response = await fetch(`/api/carts/${cartId}`, {
                        method: 'DELETE'
                    });
                    const data = await response.json();
                    if (response.ok) {
                        showMessage('Carrito vaciado exitosamente!');
                        location.reload(); // Recargar la página para mostrar el carrito vacío
                    } else {
                        showMessage(`Error: ${data.message || response.statusText}`, 'error');
                    }
                } catch (error) {
                    console.error('Error al vaciar el carrito:', error);
                    showMessage('Error de conexión al servidor.', 'error');
                }
            });
        }
    </script>
</body>
</html>
