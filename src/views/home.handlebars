<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lista de Productos</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <div class="container">
        <h1>Productos Disponibles</h1>

        <div class="filter-sort-form">
            <form id="filterSortForm">
                <div>
                    <label for="limit">Límite:</label>
                    <input type="number" id="limit" name="limit" value="{{pagination.limit}}">
                </div>
                <div>
                    <label for="page">Página:</label>
                    <input type="number" id="page" name="page" value="{{pagination.page}}">
                </div>
                <div>
                    <label for="sort">Ordenar por Precio:</label>
                    <select id="sort" name="sort">
                        <option value="">Sin ordenar</option>
                        <option value="asc" {{#if (eq pagination.sort "asc")}}selected{{/if}}>Ascendente</option>
                        <option value="desc" {{#if (eq pagination.sort "desc")}}selected{{/if}}>Descendente</option>
                    </select>
                </div>
                <div>
                    <label for="category">Categoría:</label>
                    <input type="text" id="category" name="category" value="{{pagination.query.category}}">
                </div>
                <div>
                    <label for="status">Estado:</label>
                    <select id="status" name="status">
                        <option value="">Todos</option>
                        <option value="true" {{#if (eq pagination.query.status "true")}}selected{{/if}}>Activo</option>
                        <option value="false" {{#if (eq pagination.query.status "false")}}selected{{/if}}>Inactivo</option>
                    </select>
                </div>
                <button type="submit">Aplicar Filtros</button>
            </form>
        </div>

        <ul id="productsList">
            {{#each products}}
                <li class="product-item" id="product-{{this._id}}">
                    <strong>ID:</strong> <span>{{this._id}}</span><br>
                    <strong>Título:</strong> <span>{{this.title}}</span><br>
                    <strong>Descripción:</strong> <span>{{this.description}}</span><br>
                    <strong>Código:</strong> <span>{{this.code}}</span><br>
                    <strong>Precio:</strong> <span>${{this.price}}</span><br>
                    <strong>Stock:</strong> <span>{{this.stock}}</span><br>
                    <strong>Categoría:</strong> <span>{{this.category}}</span><br>
                    <strong>Estado:</strong> <span class="status-{{this.status}}">{{#if this.status}}Activo{{else}}Inactivo{{/if}}</span><br>
                    <strong>Thumbnails:</strong> <span>{{this.thumbnails}}</span><br>
                    <div class="product-actions">
                        <a href="/products/{{this._id}}" class="button view-details-button">Ver Detalles</a>
                        <button class="button add-to-cart-button" data-product-id="{{this._id}}">Agregar al Carrito</button>
                    </div>
                </li>
            {{else}}
                <p>No hay productos para mostrar.</p>
            {{/each}}
        </ul>

        <div class="pagination-controls">
            {{#if pagination.hasPrevPage}}
                <a href="{{pagination.prevLink}}" class="button">Página Anterior</a>
            {{/if}}
            <span>Página {{pagination.page}} de {{pagination.totalPages}}</span>
            {{#if pagination.hasNextPage}}
                <a href="{{pagination.nextLink}}" class="button">Página Siguiente</a>
            {{/if}}
        </div>
    </div>

    <div id="messageBox" class="message-box"></div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const productsList = document.getElementById('productsList');
        const messageBox = document.getElementById('messageBox');
        const filterSortForm = document.getElementById('filterSortForm');

        // Helper para Handlebars para comparar valores (necesario para el select de sort)
        // Esto es un helper de Handlebars del lado del servidor. No es necesario en el JS del cliente a menos que renderices plantillas en el cliente.
        // Lo mantengo aquí como referencia, pero el servidor ya lo maneja.

        function showMessage(message, type = 'success') {
            messageBox.textContent = message;
            messageBox.className = 'message-box show';
            if (type === 'error') {
                messageBox.style.backgroundColor = '#dc3545';
            } else {
                messageBox.style.backgroundColor = '#4CAF50';
            }
            setTimeout(() => {
                messageBox.classList.remove('show');
            }, 3000);
        }

        // Esta función ya no es estrictamente necesaria para 'home.handlebars'
        // porque la página se recarga con la paginación.
        // Sin embargo, se mantiene por si se quiere un comportamiento más dinámico en el futuro.
        function addProductToDOM(product) {
            const productItem = document.createElement('li');
            productItem.className = 'product-item';
            productItem.id = `product-${product._id}`;
            productItem.innerHTML = `
                <strong>ID:</strong> <span>${product._id}</span><br>
                <strong>Título:</strong> <span>${product.title}</span><br>
                <strong>Descripción:</strong> <span>${product.description}</span><br>
                <strong>Código:</strong> <span>${product.code}</span><br>
                <strong>Precio:</strong> <span>$${product.price}</span><br>
                <strong>Stock:</strong> <span>${product.stock}</span><br>
                <strong>Categoría:</strong> <span>${product.category}</span><br>
                <strong>Estado:</strong> <span class="status-${product.status}">${product.status ? 'Activo' : 'Inactivo'}</span><br>
                <strong>Thumbnails:</strong> <span>${product.thumbnails.join(', ')}</span><br>
                <div class="product-actions">
                    <a href="/products/${product._id}" class="button view-details-button">Ver Detalles</a>
                    <button class="button add-to-cart-button" data-product-id="${product._id}">Agregar al Carrito</button>
                </div>
            `;
            // productsList.appendChild(productItem); // No agregar directamente para mantener paginación
            const noProductsMessage = productsList.querySelector('p');
            if (noProductsMessage && noProductsMessage.textContent === 'No hay productos para mostrar.') {
                noProductsMessage.remove();
            }
        }

        function removeProductFromDOM(productId) {
            const itemToRemove = document.getElementById(`product-${productId}`);
            if (itemToRemove) {
                itemToRemove.remove();
                if (productsList.children.length === 0) {
                    productsList.innerHTML = '<p>No hay productos para mostrar.</p>';
                }
            }
        }

        function updateProductInDOM(updatedProduct) {
            const existingItem = document.getElementById(`product-${updatedProduct._id}`);
            if (existingItem) {
                existingItem.innerHTML = `
                    <strong>ID:</strong> <span>${updatedProduct._id}</span><br>
                    <strong>Título:</strong> <span>${updatedProduct.title}</span><br>
                    <strong>Descripción:</strong> <span>${updatedProduct.description}</span><br>
                    <strong>Código:</strong> <span>${updatedProduct.code}</span><br>
                    <strong>Precio:</strong> <span>$${updatedProduct.price}</span><br>
                    <strong>Stock:</strong> <span>${updatedProduct.stock}</span><br>
                    <strong>Categoría:</strong> <span>${updatedProduct.category}</span><br>
                    <strong>Estado:</strong> <span class="status-${updatedProduct.status}">${updatedProduct.status ? 'Activo' : 'Inactivo'}</span><br>
                    <strong>Thumbnails:</strong> <span>${updatedProduct.thumbnails.join(', ')}</span><br>
                    <div class="product-actions">
                        <a href="/products/${updatedProduct._id}" class="button view-details-button">Ver Detalles</a>
                        <button class="button add-to-cart-button" data-product-id="${updatedProduct._id}">Agregar al Carrito</button>
                    </div>
                `;
            }
        }

        // Listener para el formulario de filtros y ordenamiento
        filterSortForm.addEventListener('submit', (event) => {
            event.preventDefault();
            const formData = new FormData(filterSortForm);
            const params = new URLSearchParams();

            const limit = formData.get('limit');
            const page = formData.get('page');
            const sort = formData.get('sort');
            const category = formData.get('category');
            const status = formData.get('status');

            if (limit) params.append('limit', limit);
            if (page) params.append('page', page);
            if (sort) params.append('sort', sort);

            let queryObj = {};
            if (category) queryObj.category = category;
            if (status !== '') queryObj.status = status === 'true'; // Convertir a booleano, solo si no es vacío

            if (Object.keys(queryObj).length > 0) {
                params.append('query', JSON.stringify(queryObj));
            }

            window.location.href = `/products?${params.toString()}`;
        });

        // Listener para los botones "Agregar al Carrito" (delegación de eventos)
        productsList.addEventListener('click', async (event) => {
            if (event.target.classList.contains('add-to-cart-button')) {
                const productId = event.target.dataset.productId;
                // ID de carrito hardcodeado para demostración. En una app real, vendría de la sesión del usuario.
                // Asegúrate de que este ID de carrito exista en tu DB o crea uno si no existe.
                const cartId = '6699a221f7c7b8e2b8c9d0e1'; // <-- ¡IMPORTANTE! Reemplaza con un ID de carrito válido de tu DB

                try {
                    const response = await fetch(`/api/carts/${cartId}/product/${productId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    const data = await response.json();

                    if (response.ok) {
                        showMessage('Producto agregado al carrito!');
                    } else {
                        showMessage(`Error al agregar producto al carrito: ${data.message || response.statusText}`, 'error');
                    }
                } catch (error) {
                    console.error('Error en la solicitud para agregar al carrito:', error);
                    showMessage('Error de conexión al servidor al agregar al carrito.', 'error');
                }
            }
        });

        // Escuchar eventos de 'newProduct' desde el servidor WebSocket
        socket.on('newProduct', (product) => {
            console.log('Nuevo producto recibido por WebSocket:', product);
            // No agregamos directamente aquí para evitar duplicados en paginación.
            // La recarga de la página o la actualización de la lista paginada manejará esto.
            showMessage('¡Nuevo producto disponible! (Puede que necesites recargar o ajustar filtros para verlo)');
        });

        // Escuchar eventos de 'deletedProduct' desde el servidor WebSocket
        socket.on('deletedProduct', (productId) => {
            console.log('Producto eliminado por WebSocket:', productId);
            removeProductFromDOM(productId); // Si el producto eliminado está en la página actual
            showMessage(`Producto con ID ${productId} eliminado.`, 'success');
        });

        // Escuchar eventos de 'updatedProduct' desde el servidor WebSocket
        socket.on('updatedProduct', (updatedProduct) => {
            console.log('Producto actualizado por WebSocket:', updatedProduct);
            updateProductInDOM(updatedProduct); // Si el producto actualizado está en la página actual
            showMessage(`Producto con ID ${updatedProduct._id} actualizado.`, 'success');
        });

    </script>
</body>
</html>
